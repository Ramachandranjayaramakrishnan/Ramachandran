{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project_layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> </ol>"},{"location":"#usage","title":"Usage","text":""},{"location":"#using_annotations","title":"Using annotations","text":"<p>[ Sponsors only][Insiders]{ .mdx-insiders } \u00b7 [ insiders-4.6.0][Insiders] \u00b7  Experimental</p> <p>Annotations consist of two parts: a marker, which can be placed anywhere in a block marked with the <code>annotate</code> class, and content located in a list below the block containing the marker:</p> Text with annotations<pre><code>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n{ .annotate }\n\n1.  :man_raising_hand: I'm an annotation! I can contain `code`, __formatted\n    text__, images, ... basically anything that can be expressed in Markdown.\n</code></pre> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"#hello_world","title":"Hello World","text":""},{"location":"#hello_there","title":"Hello there","text":"<ul> <li> <p>Dive into  Docker Swarm</p> <p>The quickest way to get started, and to get your head around the basics.</p> </li> <li> <p>Kick it with  Kubernetes</p> <p>Been around for a while? Got a high pain threshold? Jump in!</p> </li> <li> <p>Geek out in  Discord</p> <p>Join the fun, chat with fellow geeks in realtime!</p> </li> <li> <p>Fast-track with \ud83d\ude80  Premix!</p> <p>Life's too short? Fast-track your stack with Premix!</p> </li> </ul> <ul> <li> HTML for content and structure</li> <li> JavaScript for interactivity</li> <li> CSS for text running out of boxes</li> <li> Internet Explorer ... huh?</li> </ul>"},{"location":"projects/projects/","title":"Projects","text":"<pre><code>plugins:\n- optimize # (1)!\n</code></pre> <ol> <li>Please ensure that all [dependencies for image processing] are installed,     or the plugin will not work properly.</li> </ol>"},{"location":"projects/meme-generator/docker/","title":"Docker","text":"<p>The next step is to containerize the Python application, this helps us distribute a packaged version with all the required dependencies.</p> <p>To do this, we will use a <code>Dockerfile</code>, a special type of file that lets you define instructions to build your container. Let's write down the instructions we used to run the application locally. </p> <ol> <li>Install Python</li> <li>Create a python virtual environment</li> <li>Install dependencies</li> <li>Run python main.py file</li> <li>Access the application on localhost:port </li> </ol>"},{"location":"projects/meme-generator/docker/#planning_the_dockerfile","title":"Planning the Dockerfile","text":"<p>Now the instructions to build a docker file roughly translate to this..</p> <ol> <li>Get a new Python image - A Linux image with python installed, hence a new virtual environment is not required for our current application.</li> <li>Copy the required files into the container</li> <li>Install dependencies using pip</li> <li>Run <code>python main.py</code> to start the application</li> <li>Access the application on localhost:port</li> </ol>"},{"location":"projects/meme-generator/docker/#building_a_docker_image","title":"Building a Docker image","text":""},{"location":"projects/meme-generator/docker/#creating_a_dockerfile","title":"Creating a Dockerfile","text":"<p>With the instructions from the previous step, we create this Dockerfile     Dockerfile<pre><code>FROM python:3.10-slim\nWORKDIR /app\nCOPY . .\n\nRUN pip install --no-cache-dir -r requirements.txt\nCMD [\"python\", \"main.py\"]\n</code></pre></p>"},{"location":"projects/meme-generator/docker/#dockerignore","title":"Dockerignore","text":"<p>If you followed the instructions to build the application locally, you might have the <code>venv</code> folder in your current directory. <code>COPY . .</code> copies everything in the current directory into the image. This increases the size of the image and is unnecessary.     .dockerignore<pre><code>venv\n</code></pre></p>"},{"location":"projects/meme-generator/docker/#docker_build","title":"Docker build","text":"<p>Run the following commands to build the docker image     <pre><code>docker build -t meme-application:v1 . </code></pre> <code>-t</code> lets you add a tag to the application, in this case <code>v1</code>. This helps you create multiple versions of the same image with different tags.     <code>.</code> - Build the docker file in the current directory. </p> <p>Let's run the image and create a container     <pre><code>docker run -p 5000:5000 meme-application:v1\n</code></pre> <code>-p</code> - Specifies docker to attach a port in your container to your localhost.</p> Note <p>Since we did not use the detached mode <code>-d</code>, the application ends as soon as you use <code>CTRL+C</code> or close your terminal. </p> <p>Use localhost:5000 to access our application.</p>"},{"location":"projects/meme-generator/docker/#application_distribution","title":"Application Distribution","text":"<p>At this point, we have the containerized application locally. But we want others to be able to download and use it. We will use Docker Hub to publish our application for everyone to access it. </p>"},{"location":"projects/meme-generator/docker/#docker_login","title":"Docker login","text":"<p>Docker hub is a repository of docker images. This makes the distribution of the application seamless. You also need a username to tag your image and push it to Docker Hub. </p> <p>Create an account on Docker Hub and use <code>docker login</code> to log into your account locally.</p>"},{"location":"projects/meme-generator/docker/#deploying_to_docker_hub","title":"Deploying to Docker hub","text":"<p>Build the application      <pre><code>docker build -t DockerHubUserName/meme-application:v1 . </code></pre> Push to dockerhub     <pre><code>docker push DockerHubUserName/meme-application:v1 </code></pre> \ud83d\udc4f Now anyone can use your application! Next, lets deploy it on Kubernetes.  </p>"},{"location":"projects/meme-generator/kubernetes/","title":"Kubernetes","text":"<p>To deploy applications in Kubernetes, you need a Kubernetes cluster. Local or on the cloud shouldn't matter. If you want to install a local k3d cluster, follow this guide. </p>"},{"location":"projects/meme-generator/kubernetes/#kubernetes_pod","title":"Kubernetes Pod","text":"<p>Pods are the smallest objects in Kubernetes. Each pod have one main container and other helper(side-car) containers. </p>"},{"location":"projects/meme-generator/kubernetes/#creating_a_pod","title":"Creating a pod","text":"<p>Here are the instructions to creating a yaml file to run a Pod.</p> <ol> <li>Choose the api version specific to a pod. </li> <li>Mention the type of Kubernetes object, in this case a Pod. </li> <li>Give your pod a name, and one or more tags to identify/ group similar applications. </li> <li>Add details about the image to be used, open ports and memory limits. Read why you should not be using CPU limits.</li> </ol>"},{"location":"projects/meme-generator/kubernetes/#pod_yaml","title":"Pod YAML","text":"<p>meme-pod.yaml<pre><code>apiVersion: v1\nkind: Pod\nmetadata: name: meme-app\nlabels:\napp: k8s-memes\nspec:\ncontainers:\n- name: k8s-meme-app\nimage: DockerHubUserName/buildxtest2:latest\nports:\n- containerPort: 5000\nprotocol: TCP\nresources:\nlimits:\nmemory: \"128Mi\"\n</code></pre> Save this code into a file or change directory to <code>/kubernetes</code> and run <code>kubectl apply -f meme-pod.yaml</code>.</p>"},{"location":"projects/meme-generator/kubernetes/#port-forwarding","title":"Port-forwarding","text":"<p><code>port-forward</code> is a temporary method to expose the application to the outside world.</p> <p><pre><code>kubectl port-forward pod/meme-app 5000:5000\n</code></pre> If the pod is deleted and recreated, terminal is closed, or you close the port-forward, your application cannot be accessed.</p>"},{"location":"projects/meme-generator/kubernetes/#deleting_a_pod","title":"Deleting a pod","text":"<p>Use <code>kubectl delete -f meme-pod.yaml</code></p>"},{"location":"projects/meme-generator/kubernetes/#kubernetes_replicasets","title":"Kubernetes Replicasets","text":"<p>ReplicaSets are the next level abstraction over Pods, it makes sure you always have <code>n</code> replicas all the time. It can also manage pod/pods created already by using the pod label.</p>"},{"location":"projects/meme-generator/kubernetes/#creating_a_replicaset","title":"Creating a ReplicaSet","text":"<p>The instructions are similar to a Pod, but here you also give Kubernetes a template with instructions to create a pod other than details about ReplicaSet. </p> <p>meme-replicaset.yaml<pre><code>apiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\nname: meme-replicaset\nlabels: app: meme-app-replicaset\nspec:\nreplicas: 3\nselector:\nmatchLabels:\napp: meme-app-replicaset\ntemplate:\nmetadata:\nlabels:\napp: meme-app-replicaset\nspec:\ncontainers:\n- name: meme-app\nimage: pavangudiwada/buildxtest2:latest\nports:\n- containerPort: 5000\nprotocol: TCP\nresources:\nlimits:\nmemory: \"128Mi\"\n</code></pre> <code>replicas: 3</code> - Kubernetes will maintain 3 pods with the given pod template at all times.</p> <p><code>selector.matchLabels.app = meme-app-replicaset</code> - If there are other pods with the same label, the ReplicaSet will include them in the 3 replicas and manage them too.</p>"},{"location":"projects/meme-generator/kubernetes/#services","title":"Services","text":"<p>When a ReplicaSet is managing pods, and one of them goes down. How do you make sure traffic is routed to others? How do you manage to connect to different pods and communicate with them. Services to your rescue. </p> <p>A service manages communication between multiple pods seamlessly.</p>"},{"location":"projects/meme-generator/kubernetes/#creating_a_service","title":"Creating a service","text":"<p>meme-service.yaml<pre><code>apiVersion: v1\nkind: Service\nmetadata:\nname: meme-service\nspec:\ntype: ClusterIP\nports:\n- port: 5000\nselector:\napp: meme-app-replicaset\n</code></pre> <pre><code>kubectl apply -f meme-service.yaml\n</code></pre> The service is automatically attached to the ReplicaSet using <code>selector.app = meme-app-replicaset</code>. </p>"},{"location":"projects/meme-generator/kubernetes/#testing_the_service","title":"Testing the Service","text":"<p>A ClusterIP service makes a pod accessable to other pods in the same cluster. Let's test if our service is actually working. </p> <p>Run <code>kubectl describe service meme-service</code></p> <p>output<pre><code>-&gt; kubectl describe service meme-service\nName:              meme-service\nNamespace:         default\nLabels:            &lt;none&gt;\nAnnotations:       &lt;none&gt;\nSelector:          app=meme-app-deployment\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.43.64.228\nIPs:               10.43.64.228\nPort:              &lt;unset&gt;  5000/TCP\nTargetPort:        5000/TCP\nEndpoints:         10.42.0.14:5000,10.42.0.18:5000\nSession Affinity:  None\nEvents:            &lt;none&gt;\n</code></pre> Since we created two replicas we have two <code>Endpoints:</code></p> <p>Exec into one of the pods using <pre><code>kubectl exec -it meme-replicaset-XXXXX -- /bin/bash\n</code></pre> To get data from the http endpoint we will use curl, let's first install it in the pod.</p> <p><pre><code>apt update &amp;&amp; apt -y install curl\n</code></pre> Run <code>curl http://IP:Port</code>, use the endpoints.</p> <p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Meme Generator&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;center&gt;\n&lt;h1&gt;Meme Generator Project&lt;/h1&gt;\n&lt;form action=\"/\" method=\"POST\" enctype=\"multipart/form-data\"&gt;\n&lt;div&gt;\n&lt;img src=\"https://preview.redd.it/z19naccatiia1.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;v=enabled&amp;amp;s=e8d575c4030c4790090cf9670c23d71449b598f6\" style=\"min-width: 200px; max-width: 800px; min-height: 500px; max-height: 600px;\"&gt;\n&lt;/div&gt;\n&lt;button type=\"submit\" style=\"padding: 5px;\"&gt;Generate meme&lt;/button&gt;\n&lt;div&gt;\n                Running on &lt;b&gt;meme-replicaset-64d4855c47&lt;/b&gt; a &lt;b&gt;Linux&lt;/b&gt;, &lt;b&gt;x86_64&lt;/b&gt; architecture machine\n            &lt;/div&gt;  \n&lt;/form&gt;\n&lt;/center&gt;\n&lt;/body&gt;\n</code></pre> In the output, line 15 shows you the name of the pod that is serving the application.</p>"},{"location":"projects/meme-generator/kubernetes/#cleaning_up","title":"Cleaning up","text":"<pre><code>kubectl delete -f meme-replicaset.yaml meme-service.yaml\n</code></pre> <p>That's it! \ud83c\udf89 You now deployed a python application on Kubernetes.</p>"},{"location":"projects/meme-generator/localbuild/","title":"Build the project locally","text":"<p>We will use the Python project code and build the meme generator locally to understand what it does and how to run it.</p>"},{"location":"projects/meme-generator/localbuild/#setup_python","title":"Setup python","text":"<ol> <li>Download the repo, change the directory to meme generator     <pre><code>git clone :repo\ncd reponame/projects/meme-generator\n</code></pre></li> <li> <p>Install python virtual environment. It lets us run install python packages without affecting our default python installation.     <pre><code>python install venv venv # (1)\n</code></pre></p> <ol> <li>Learn how to use virtual environments here</li> </ol> </li> <li> <p>Install required packages specified in the <code>requirements.txt</code>.</p> <pre><code>pip install -r requirements.txt\n</code></pre> </li> </ol>"},{"location":"projects/meme-generator/localbuild/#run_the_app","title":"Run the app","text":"<p><code>main.py</code> is our Python application, <code>templates</code> contains some HTML required for the web application. </p> <p>Use <code>python main.py</code> to start the application. Navigate to http://localhost:5000</p> <p>Vola!!\ud83c\udf89 There we have our meme-generator running. Well, done.\ud83d\udc4f</p> <p>Next lets containerize the app. </p>"},{"location":"python/python/","title":"Building a Python Meme generator with Flask","text":""},{"location":"reference/dockerbuildx/","title":"Docker buildx","text":""},{"location":"reference/localcluster/","title":"K3s","text":"<p>Steps to install K3s locally</p>"},{"location":"reference/virtualenv/","title":"Python virtual environment","text":""}]}