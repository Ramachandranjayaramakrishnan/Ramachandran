{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc4bHello DevOps Project - More doing, less reading","text":""},{"location":"#who_is_this_for","title":"Who is this for?","text":"<ul> <li>People with theoretical DevOps knowledge</li> <li>Beginners in DevOps</li> </ul> <p>Start now!</p> <p>Your First Docker Container </p>"},{"location":"#coming_soon","title":"Coming Soon","text":"<p>Your First Kubernetes Pod Your First Kubernetes ReplicaSet</p>"},{"location":"additionalguides/dockerbuildx/","title":"Docker buildx","text":""},{"location":"additionalguides/localcluster/","title":"K3s","text":"<p>Steps to install K3s locally</p>"},{"location":"additionalguides/virtualenv/","title":"Python virtual environment","text":""},{"location":"projects/projects/","title":"Projects","text":"<pre><code>plugins:\n- optimize # (1)!\n</code></pre> <ol> <li>Please ensure that all [dependencies for image processing] are installed,     or the plugin will not work properly.</li> </ol>"},{"location":"projects/buildpythonlocally/introduction/","title":"Your First Docker Container","text":"<p>In this project, we will containerize and run an application using Docker.</p>"},{"location":"projects/buildpythonlocally/introduction/#what_youll_learn","title":"\ud83c\udfaf What you'll learn","text":"<ul> <li>Writing a Dockerfile </li> <li>Creating your first Docker image</li> </ul>"},{"location":"projects/buildpythonlocally/introduction/#prerequisites","title":"\ud83d\uded1 Prerequisites","text":"<ul> <li>Docker installed on your machine.</li> <li>Python and pip installed. Don't worry, you don't need to know how to code in Python. </li> </ul>"},{"location":"projects/buildpythonlocally/yourfirstproject/","title":"\ud83d\udd25Your First Docker Container","text":"<p>In this project, we will containerize and run an application using Docker. The main goal of using Docker is to make an app portable and reproducible.</p>"},{"location":"projects/buildpythonlocally/yourfirstproject/#what_youll_learn","title":"\ud83c\udfaf What you'll learn","text":"<ul> <li>Writing a Dockerfile </li> <li>Creating your first Docker image</li> </ul>"},{"location":"projects/buildpythonlocally/yourfirstproject/#prerequisites","title":"\ud83d\uded1 Prerequisites","text":"<ul> <li>Docker installed on your machine.</li> <li>Python and pip installed. Don't worry, you don't need to know how to code in Python. </li> </ul>"},{"location":"projects/buildpythonlocally/yourfirstproject/#introduction","title":"Introduction","text":"<p>We will use a simple Python application as the base project and containerize it using Docker. This application gets a meme from Reddit and displays it as shown below. </p> <p></p>"},{"location":"projects/buildpythonlocally/yourfirstproject/#initial_setup","title":"Initial Setup","text":"<p>Download the repo with our code and switch to <code>hello-devops-project/code/meme-generator/</code> <pre><code>git clone https://github.com/robusta-dev/Hello-DevOps-Project.git\ncd hello-devops-project/code/meme-generator/\n</code></pre></p>"},{"location":"projects/buildpythonlocally/yourfirstproject/#run_python_application_locally","title":"Run Python application locally","text":"<p>Before we jump into containerizing the app, let's see how we can run it locally on your machine. This will help us understand the required steps to run a python app.</p> <p>The following commands, install required packages and starts the application.  <pre><code>pip install -r requirements.txt\npython main.py\n</code></pre></p> <p>Navigate to http://localhost:5000 on your browser to see the app exposed on port <code>5000</code>.</p>"},{"location":"projects/buildpythonlocally/yourfirstproject/#create_the_dockerfile","title":"Create the Dockerfile","text":"<p>A Dockerfile contains instructions to containerize an application. In this case, we will write the instructions to build and containerize our python app. </p> <p>To do this, we will follow these steps</p> <ol> <li>Get a Docker image with python preinstalled <pre><code>FROM python:3.10-slim\n</code></pre></li> <li>Copy the code from the directory into the Docker image. <pre><code>COPY . .\n</code></pre></li> <li>Install required packages using pip <pre><code>RUN pip install --no-cache-dir -r requirements.txt </code></pre></li> <li>Give the command that's needs to be run when the container is created. Here we are running <code>main.py</code> file.  <pre><code>CMD [\"python\", \"main.py\"]\n</code></pre></li> </ol> <p>This is the result of the previous steps.      Dockerfile<pre><code>FROM python:3.10-slim COPY . .\nRUN pip install --no-cache-dir -r requirements.txt\nCMD [\"python\", \"main.py\"]\n</code></pre></p>"},{"location":"projects/buildpythonlocally/yourfirstproject/#build_the_docker_image","title":"Build the Docker image","text":"<p>A Docker image is a binary package with your app, dependencies and startup command baked into it.</p> <p>Anyone with the Docker image can run your application without any issues.</p> <p>Run the following command to build the docker image <pre><code>docker build -t python-app:v1 . # (1)!\n</code></pre></p> <ol> <li> <p>What are these arguments for?</p> <p><code>-t</code> - Used to tag the image, in this case <code>v1</code>. You can create multiple versions of the same image with different tags.</p> <p><code>.</code> - The period specifies that the Dockerfile in the current directory be used to build the image. You can also provide a path to the Dockerfile if its in a different location.</p> </li> </ol> Output <p></p>"},{"location":"projects/buildpythonlocally/yourfirstproject/#run_the_container","title":"Run the container","text":"<p>The image we created is stored on our system. Let's run the image and create your first container <pre><code>docker run -p 5000:5000 python-app:v1 # (1)!\n</code></pre></p> <ol> <li> <p>What is this argument for?</p> <p><code>-p</code> - Lets you specify <code>PortToBeExposed:ContainerPort</code>, in this case <code>5000:5000</code>. </p> <p>If you use <code>docker run -p 6000:5000 python-app:v1</code>, you will be able to access the application using http://localhost:6000</p> </li> </ol> Output <p></p> <p>Navigate to http://localhost:5000 to see the running app.</p> Note <p>The application ends as soon as you use <code>CTRL+C</code> or close your terminal. If you want the application on the background use <code>docker run -d -p 5000:5000 python-app:v1</code>. </p> <p><code>-d</code> - This argument lets you run your container in the background.</p> <p>Voil\u00e0!!\ud83c\udf89 There we have your first Docker container. Well, done.\ud83d\udc4f</p>"},{"location":"projects/buildpythonlocally/yourfirstproject/#3_questions_to_check_your_docker_understanding","title":"\u27533 Questions to check your Docker understanding","text":"<ol> <li>If Dockerfile is a cake recipe, the image is a _____.</li> <li>In the command <code>docker run -p 8000:5000</code>, 8000 refers to _____ and 5000 refers to _____. </li> <li>The point of containerizing an app is _____. </li> </ol> <p>Tweet your answers  </p>"},{"location":"projects/buildpythonlocally/yourfirstproject/#3_steps_to_master_dockerfile","title":"\ud83e\udd773 Steps to master Dockerfile","text":"<ol> <li>Redo the exercise.</li> <li>Deploy a similar app using this guide from Docker docs.</li> <li>Containerize this application. </li> </ol>"},{"location":"projects/meme-generator/about/","title":"Kubernetes Meme Generator","text":""},{"location":"projects/meme-generator/about/#project_introduction","title":"\ud83c\udfebProject Introduction","text":"<p>This project will help you practice the basic DevOps concepts like containerization, application distribution, Docker and Kubernetes.</p>"},{"location":"projects/meme-generator/about/#what_youll_learn","title":"\ud83c\udfafWhat you'll learn","text":""},{"location":"projects/meme-generator/about/#python","title":"\ud83d\udc0dPython","text":"<ul> <li>Setting up a project locally</li> </ul>"},{"location":"projects/meme-generator/about/#docker","title":"\ud83d\udc33Docker","text":"<ul> <li>Containerize the application</li> <li>Creating a Dockerfile</li> <li>Building an image</li> <li>Running a container</li> <li>Exposing ports</li> <li>Pushing Docker image to a public registry(DockerHub)</li> </ul>"},{"location":"projects/meme-generator/about/#kubernetes","title":"\u2638\ufe0fKubernetes","text":"<ul> <li>Creating and running Pods</li> <li>Port-forwarding</li> <li>Creating and using ReplicaSet</li> <li>Creating a ClusterIP Service</li> </ul>"},{"location":"projects/meme-generator/about/#project_outline","title":"\ud83d\uddfa\ufe0fProject Outline","text":"<ol> <li>Build </li> </ol>"},{"location":"projects/meme-generator/docker/","title":"Docker","text":"<p>The next step is to containerize the Python application, this helps us distribute a packaged version with all the required dependencies.</p> <p>To do this, we will use a <code>Dockerfile</code>, a special type of file that lets you define instructions to build your container. Let's write down the instructions we used to run the application locally. </p> <ol> <li>Install Python</li> <li>Create a python virtual environment</li> <li>Install dependencies</li> <li>Run python main.py file</li> <li>Access the application on localhost:port </li> </ol>"},{"location":"projects/meme-generator/docker/#planning_the_dockerfile","title":"Planning the Dockerfile","text":"<p>Now the instructions to build a docker file roughly translate to this..</p> <ol> <li>Get a new Python image - A Linux image with python installed, hence a new virtual environment is not required for our current application.</li> <li>Copy the required files into the container</li> <li>Install dependencies using pip</li> <li>Run <code>python main.py</code> to start the application</li> <li>Access the application on localhost:port</li> </ol>"},{"location":"projects/meme-generator/docker/#building_a_docker_image","title":"Building a Docker image","text":""},{"location":"projects/meme-generator/docker/#creating_a_dockerfile","title":"Creating a Dockerfile","text":"<p>With the instructions from the previous step, we create this Dockerfile     Dockerfile<pre><code>FROM python:3.10-slim\nWORKDIR /app\nCOPY . .\n\nRUN pip install --no-cache-dir -r requirements.txt\nCMD [\"python\", \"main.py\"]\n</code></pre></p>"},{"location":"projects/meme-generator/docker/#dockerignore","title":"Dockerignore","text":"<p>If you followed the instructions to build the application locally, you might have the <code>venv</code> folder in your current directory. <code>COPY . .</code> copies everything in the current directory into the image. This increases the size of the image and is unnecessary.     .dockerignore<pre><code>venv\n</code></pre></p>"},{"location":"projects/meme-generator/docker/#docker_build","title":"Docker build","text":"<p>Run the following commands to build the docker image     <pre><code>docker build -t meme-application:v1 . </code></pre> <code>-t</code> lets you add a tag to the application, in this case <code>v1</code>. This helps you create multiple versions of the same image with different tags.     <code>.</code> - Build the docker file in the current directory. </p> <p>Let's run the image and create a container     <pre><code>docker run -p 5000:5000 meme-application:v1\n</code></pre> <code>-p</code> - Specifies docker to attach a port in your container to your localhost.</p> Note <p>Since we did not use the detached mode <code>-d</code>, the application ends as soon as you use <code>CTRL+C</code> or close your terminal. </p> <p>Use localhost:5000 to access our application.</p>"},{"location":"projects/meme-generator/docker/#application_distribution","title":"Application Distribution","text":"<p>At this point, we have the containerized application locally. But we want others to be able to download and use it. We will use Docker Hub to publish our application for everyone to access it. </p>"},{"location":"projects/meme-generator/docker/#docker_login","title":"Docker login","text":"<p>Docker hub is a repository of docker images. This makes the distribution of the application seamless. You also need a username to tag your image and push it to Docker Hub. </p> <p>Create an account on Docker Hub and use <code>docker login</code> to log into your account locally.</p>"},{"location":"projects/meme-generator/docker/#deploying_to_docker_hub","title":"Deploying to Docker hub","text":"<p>Build the application      <pre><code>docker build -t DockerHubUserName/meme-application:v1 . </code></pre> Push to dockerhub     <pre><code>docker push DockerHubUserName/meme-application:v1 </code></pre> \ud83d\udc4f Now anyone can use your application! Next, lets deploy it on Kubernetes.  </p>"},{"location":"projects/meme-generator/kubernetes/","title":"Kubernetes","text":"<p>To deploy applications in Kubernetes, you need a Kubernetes cluster. Local or on the cloud shouldn't matter. If you want to install a local k3d cluster, follow this guide. </p>"},{"location":"projects/meme-generator/kubernetes/#kubernetes_pod","title":"Kubernetes Pod","text":"<p>Pods are the smallest objects in Kubernetes. Each pod have one main container and other helper(side-car) containers. </p>"},{"location":"projects/meme-generator/kubernetes/#creating_a_pod","title":"Creating a pod","text":"<p>Here are the instructions to creating a yaml file to run a Pod.</p> <ol> <li>Choose the api version specific to a pod. </li> <li>Mention the type of Kubernetes object, in this case a Pod. </li> <li>Give your pod a name, and one or more tags to identify/ group similar applications. </li> <li>Add details about the image to be used, open ports and memory limits. Read why you should not be using CPU limits.</li> </ol>"},{"location":"projects/meme-generator/kubernetes/#pod_yaml","title":"Pod YAML","text":"<p>meme-pod.yaml<pre><code>apiVersion: v1\nkind: Pod\nmetadata: name: meme-app\nlabels:\napp: k8s-memes\nspec:\ncontainers:\n- name: k8s-meme-app\nimage: DockerHubUserName/buildxtest2:latest\nports:\n- containerPort: 5000\nprotocol: TCP\nresources:\nlimits:\nmemory: \"128Mi\"\n</code></pre> Save this code into a file or change directory to <code>/kubernetes</code> and run <code>kubectl apply -f meme-pod.yaml</code>.</p>"},{"location":"projects/meme-generator/kubernetes/#port-forwarding","title":"Port-forwarding","text":"<p><code>port-forward</code> is a temporary method to expose the application to the outside world.</p> <p><pre><code>kubectl port-forward pod/meme-app 5000:5000\n</code></pre> If the pod is deleted and recreated, terminal is closed, or you close the port-forward, your application cannot be accessed.</p>"},{"location":"projects/meme-generator/kubernetes/#deleting_a_pod","title":"Deleting a pod","text":"<p>Use <code>kubectl delete -f meme-pod.yaml</code></p>"},{"location":"projects/meme-generator/kubernetes/#kubernetes_replicasets","title":"Kubernetes Replicasets","text":"<p>ReplicaSets are the next level abstraction over Pods, it makes sure you always have <code>n</code> replicas all the time. It can also manage pod/pods created already by using the pod label.</p>"},{"location":"projects/meme-generator/kubernetes/#creating_a_replicaset","title":"Creating a ReplicaSet","text":"<p>The instructions are similar to a Pod, but here you also give Kubernetes a template with instructions to create a pod other than details about ReplicaSet. </p> <p>meme-replicaset.yaml<pre><code>apiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\nname: meme-replicaset\nlabels: app: meme-app-replicaset\nspec:\nreplicas: 3\nselector:\nmatchLabels:\napp: meme-app-replicaset\ntemplate:\nmetadata:\nlabels:\napp: meme-app-replicaset\nspec:\ncontainers:\n- name: meme-app\nimage: pavangudiwada/buildxtest2:latest\nports:\n- containerPort: 5000\nprotocol: TCP\nresources:\nlimits:\nmemory: \"128Mi\"\n</code></pre> <code>replicas: 3</code> - Kubernetes will maintain 3 pods with the given pod template at all times.</p> <p><code>selector.matchLabels.app = meme-app-replicaset</code> - If there are other pods with the same label, the ReplicaSet will include them in the 3 replicas and manage them too.</p>"},{"location":"projects/meme-generator/kubernetes/#services","title":"Services","text":"<p>When a ReplicaSet is managing pods, and one of them goes down. How do you make sure traffic is routed to others? How do you manage to connect to different pods and communicate with them. Services to your rescue. </p> <p>A service manages communication between multiple pods seamlessly.</p>"},{"location":"projects/meme-generator/kubernetes/#creating_a_service","title":"Creating a service","text":"<p>meme-service.yaml<pre><code>apiVersion: v1\nkind: Service\nmetadata:\nname: meme-service\nspec:\ntype: ClusterIP\nports:\n- port: 5000\nselector:\napp: meme-app-replicaset\n</code></pre> <pre><code>kubectl apply -f meme-service.yaml\n</code></pre> The service is automatically attached to the ReplicaSet using <code>selector.app = meme-app-replicaset</code>. </p>"},{"location":"projects/meme-generator/kubernetes/#testing_the_service","title":"Testing the Service","text":"<p>A ClusterIP service makes a pod accessable to other pods in the same cluster. Let's test if our service is actually working. </p> <p>Run <code>kubectl describe service meme-service</code></p> <p>output<pre><code>-&gt; kubectl describe service meme-service\nName:              meme-service\nNamespace:         default\nLabels:            &lt;none&gt;\nAnnotations:       &lt;none&gt;\nSelector:          app=meme-app-deployment\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.43.64.228\nIPs:               10.43.64.228\nPort:              &lt;unset&gt;  5000/TCP\nTargetPort:        5000/TCP\nEndpoints:         10.42.0.14:5000,10.42.0.18:5000\nSession Affinity:  None\nEvents:            &lt;none&gt;\n</code></pre> Since we created two replicas we have two <code>Endpoints:</code></p> <p>Exec into one of the pods using <pre><code>kubectl exec -it meme-replicaset-XXXXX -- /bin/bash\n</code></pre> To get data from the http endpoint we will use curl, let's first install it in the pod.</p> <p><pre><code>apt update &amp;&amp; apt -y install curl\n</code></pre> Run <code>curl http://IP:Port</code>, use the endpoints.</p> <p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Meme Generator&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;center&gt;\n&lt;h1&gt;Meme Generator Project&lt;/h1&gt;\n&lt;form action=\"/\" method=\"POST\" enctype=\"multipart/form-data\"&gt;\n&lt;div&gt;\n&lt;img src=\"https://preview.redd.it/z19naccatiia1.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;v=enabled&amp;amp;s=e8d575c4030c4790090cf9670c23d71449b598f6\" style=\"min-width: 200px; max-width: 800px; min-height: 500px; max-height: 600px;\"&gt;\n&lt;/div&gt;\n&lt;button type=\"submit\" style=\"padding: 5px;\"&gt;Generate meme&lt;/button&gt;\n&lt;div&gt;\n                Running on &lt;b&gt;meme-replicaset-64d4855c47&lt;/b&gt; a &lt;b&gt;Linux&lt;/b&gt;, &lt;b&gt;x86_64&lt;/b&gt; architecture machine\n            &lt;/div&gt;  \n&lt;/form&gt;\n&lt;/center&gt;\n&lt;/body&gt;\n</code></pre> In the output, line 15 shows you the name of the pod that is serving the application.</p>"},{"location":"projects/meme-generator/kubernetes/#cleaning_up","title":"Cleaning up","text":"<pre><code>kubectl delete -f meme-replicaset.yaml meme-service.yaml\n</code></pre> <p>That's it! \ud83c\udf89 You now deployed a python application on Kubernetes.</p>"},{"location":"projects/meme-generator/localbuild/","title":"Build the project locally","text":"<p>We will use the Python project code and build the meme generator locally to understand what it does and how to run it.</p>"},{"location":"projects/meme-generator/localbuild/#setup_python","title":"Setup python","text":"<ol> <li>Download the repo, change the directory to meme generator     <pre><code>git clone :repo\ncd reponame/projects/meme-generator\n</code></pre></li> <li> <p>Install python virtual environment. It lets us run install python packages without affecting our default python installation.     <pre><code>python -m venv venv # (1)\n</code></pre></p> <ol> <li>Learn how to use virtual environments here</li> </ol> </li> <li> <p>Install required packages specified in the <code>requirements.txt</code>.</p> <pre><code>pip install -r requirements.txt\n</code></pre> </li> </ol>"},{"location":"projects/meme-generator/localbuild/#run_the_app","title":"Run the app","text":"<p><code>main.py</code> is our Python application, <code>templates</code> contains some HTML required for the web application. </p> <p>Use <code>python main.py</code> to start the application. Navigate to http://localhost:5000</p> <p>Vola!!\ud83c\udf89 There we have our meme-generator running. Well, done.\ud83d\udc4f</p> <p>Next lets containerize the app. </p>"},{"location":"projects/project2/yourfirstpod/","title":"\ud83d\udd25Your First Kubernetes Pod","text":"<p>In this project, we will deploy a Docker container on Kubernetes. One of the benefits of Kubernetes is that it will make sure your application is running all the time. For example, if your Docker container stops, you have to manually restart it. But with Kubernetes it's done automatically.</p>"},{"location":"projects/project2/yourfirstpod/#what_youll_learn","title":"\ud83c\udfaf What you'll learn","text":"<ul> <li>Writing a Kubernetes Pod YAML.</li> <li>Creating your first Pod.</li> <li>Port-forwarding the Pod to view your application. </li> </ul>"},{"location":"projects/project2/yourfirstpod/#prerequisites","title":"\ud83d\uded1 Prerequisites","text":"<ul> <li>Kubernetes cluster, local or in the cloud. If you want to install a local k3d cluster, follow this guide.</li> <li>Docker &amp; kubectl installed on your machine.</li> </ul>"},{"location":"projects/project2/yourfirstpod/#introduction","title":"Introduction","text":"<p>To run a container on Kubernetes we use a Pod. A Pod is an abstraction over a container. Each Pod has one main container and one or more helper(side-car) containers.</p>"},{"location":"projects/project2/yourfirstpod/#create_a_pod_yaml","title":"Create a Pod YAML","text":"<p>To create an Kubernetes object we write specific instructions. In this case its a Pod. Once you are done, give this file to kubernetes and it takes care of the rest.</p> <ol> <li>A Pod is created using the <code>apiVersion</code> <code>v1</code>. </li> </ol> <p><pre><code>apiVersion: v1\nkind: Pod\n</code></pre> 2. Metadata helps you identify Kubernetes objects. Labels are used to group similar objects. Example: All objects related to the meme app are grouped using the label <code>k8s-memes</code>. </p> <p><pre><code>metadata: name: meme-app\nlabels:\napp: k8s-memes\n</code></pre> 3. Using <code>spec</code> we specify the containers we want to define, what Docker image they use, ports we need to open etc.</p> <pre><code>spec:\ncontainers:\n- name: k8s-meme-app\nimage: pavangudiwada/dockerimage:v1 # (1)!\nports:\n- containerPort: 5000 # (2)!\nprotocol: TCP\nresources: # (3)!\nrequests:\nmemory: \"64Mi\"\ncpu: \"250m\"\nlimits:\nmemory: \"128Mi\"\n</code></pre> <ol> <li> <p>You can add your own Docker image using <code>DockerHubUserName/ImageName:Tag</code></p> </li> <li> <p>Port the application is to be exposed on and using what protocol.  </p> </li> <li> <p>Define the amount of CPU and memory a pod can use. Learn more about them here. Also read \"Stop Using CPU Limits\" to understand the misconceptions around CPU limits. </p> </li> </ol> <p>This is the result of the previous steps. Save it to a file called <code>first-pod.yaml</code> first-pod.yaml<pre><code>apiVersion: v1\nkind: Pod\nmetadata: name: meme-app\nlabels:\napp: k8s-memes\nspec:\ncontainers:\n- name: k8s-meme-app\nimage: pavangudiwada/dockerimage:v1\nports:\n- containerPort: 5000\nprotocol: TCP\nresources:\nrequests:\nmemory: \"64Mi\"\ncpu: \"250m\"\nlimits:\nmemory: \"128Mi\"\n</code></pre></p>"},{"location":"projects/project2/yourfirstpod/#deploy_the_pod","title":"Deploy the Pod","text":"<p>Next, lets use the Kubernetes Pod YAML to create our Pod. </p> <p>Run <code>kubectl apply -f first-pod.yaml</code> to create a Pod with all our specifications. </p>"},{"location":"projects/project2/yourfirstpod/#view_the_pod","title":"View the Pod","text":"<p>The Pod could take a few seconds to start running. You can see this using <code>kubectl get pod meme-app</code> </p> Output <pre><code> \u276f kubectl get pod meme-app                                                                  NAME       READY   STATUS    RESTARTS   AGE\n meme-app   1/1     Running   0          11s\n</code></pre>"},{"location":"projects/project2/yourfirstpod/#access_the_application","title":"Access the application","text":"<p><code>port-forward</code> is a feature to expose any port of a Pod locally. It only works as long as the Pod is running and the terminal is open.</p> <p><pre><code>kubectl port-forward pod/meme-app 5000:5000\n</code></pre> Navigate to http://localhost:5000 to see the running app.</p> Output <p></p> <p>Voil\u00e0!!\ud83c\udf89 There, we have your first Kubernetes Pod. Well, done.\ud83d\udc4f</p>"},{"location":"projects/project2/yourfirstpod/#delete_the_pod","title":"Delete the Pod","text":"<p>If you no longer need a Pod, you can use <code>kubectl delete -f meme-pod.yaml</code>. Alternatively, <code>kubectl delete pod meme-app</code> can also be used. </p>"},{"location":"projects/project2/yourfirstpod/#3_questions_to_check_your_kubernetes_pod_understanding","title":"\u27533 Questions to check your Kubernetes Pod understanding","text":"<ol> <li>How do you see which Pods are running?</li> <li>What is the difference between a container and a Pod?</li> <li>Can you run a container on Kubernetes without a Pod?</li> </ol>"},{"location":"projects/project2/yourfirstpod/#3_steps_to_master_kubernetes_pod","title":"\ud83e\udd773 Steps to master Kubernetes Pod","text":"<ol> <li>Create a Pod using this Docker image and expose port <code>3000</code>.</li> <li>Follow this guide by Kubernetes to understand Pods in depth. </li> <li>Read about <code>kubectl create</code> command. </li> </ol>"},{"location":"python/python/","title":"Building a Python Meme generator with Flask","text":""}]}